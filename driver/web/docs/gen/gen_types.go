// Package Def provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package Def

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AppointmentOptions defines model for AppointmentOptions.
type AppointmentOptions struct {
	Questions *[]Question `json:"questions,omitempty"`
	TimeSlots *[]TimeSlot `json:"time_slots,omitempty"`
}

// AppointmentPost defines model for AppointmentPost.
type AppointmentPost struct {
	Answers         *[]QuestionAnswer `json:"answers,omitempty"`
	EndTime         *string           `json:"end_time,omitempty"`
	PersonId        *string           `json:"person_id,omitempty"`
	ProviderId      *string           `json:"provider_id,omitempty"`
	SlotId          *string           `json:"slot_id,omitempty"`
	SourceId        *string           `json:"source_id,omitempty"`
	StartTime       *string           `json:"start_time,omitempty"`
	Type            *string           `json:"type,omitempty"`
	UnitId          *string           `json:"unit_id,omitempty"`
	UserExternalIds ExternalUserID    `json:"user_external_ids"`
}

// BuildingBlockAppointment defines model for BuildingBlockAppointment.
type BuildingBlockAppointment struct {
	EndTime *string `json:"end_time,omitempty"`
	Host    struct {
		FirstName *string `json:"first_name,omitempty"`
		LastName  *string `json:"last_name,omitempty"`
	} `json:"host"`
	PersonId        *string        `json:"person_id,omitempty"`
	ProviderId      *string        `json:"provider_id,omitempty"`
	SourceId        *string        `json:"source_id,omitempty"`
	StartTime       *string        `json:"start_time,omitempty"`
	Type            *string        `json:"type,omitempty"`
	UnitId          *string        `json:"unit_id,omitempty"`
	UserExternalIds ExternalUserID `json:"user_external_ids"`
}

// Config defines model for Config.
type Config struct {
	AppId       *string     `json:"app_id,omitempty"`
	Data        Config_Data `json:"data"`
	DateCreated *string     `json:"date_created,omitempty"`
	DateUpdated *string     `json:"date_updated"`
	Id          *string     `json:"id,omitempty"`
	OrgId       *string     `json:"org_id,omitempty"`
	System      bool        `json:"system"`
	Type        string      `json:"type"`
}

// Config_Data defines model for Config.Data.
type Config_Data struct {
	union json.RawMessage
}

// ContactLegacy defines model for ContactLegacy.
type ContactLegacy struct {
	ContactEmail *string `json:"contactEmail,omitempty"`
	ContactName  *string `json:"contactName,omitempty"`
	ContactPhone *string `json:"contactPhone,omitempty"`
}

// EnvConfigData defines model for EnvConfigData.
type EnvConfigData struct {
	ExampleEnv string `json:"example_env"`
}

// Example defines model for Example.
type Example struct {
	AppId       *string `json:"app_id,omitempty"`
	Data        string  `json:"data"`
	DateCreated *string `json:"date_created,omitempty"`
	DateUpdated *string `json:"date_updated"`
	Id          *string `json:"id,omitempty"`
	OrgId       *string `json:"org_id,omitempty"`
}

// ExternalUserID defines model for ExternalUserID.
type ExternalUserID struct {
	Uin *string `json:"uin,omitempty"`
}

// LegacyEvent defines model for LegacyEvent.
type LegacyEvent struct {
	AllDay                *bool            `json:"all_day,omitempty"`
	CalendarId            *string          `json:"calendar_id,omitempty"`
	Category              *string          `json:"category,omitempty"`
	Contacts              *[]ContactLegacy `json:"contacts,omitempty"`
	CreatedBy             *string          `json:"createdBy,omitempty"`
	DataModified          *string          `json:"dataModified,omitempty"`
	DataSourceEventId     *string          `json:"dataSourceEventId,omitempty"`
	DateCreated           *string          `json:"dateCreated,omitempty"`
	EndDate               *string          `json:"endDate,omitempty"`
	EventId               *string          `json:"event_id,omitempty"`
	IcalURL               *string          `json:"icalURL,omitempty"`
	Id                    *string          `json:"id,omitempty"`
	ImageURL              *string          `json:"imageURL"`
	IsEventFree           *bool            `json:"isEventFree,omitempty"`
	IsSuperEvent          *bool            `json:"isSuperEvent,omitempty"`
	IsVirtual             *bool            `json:"isVirtual,omitempty"`
	Location              *interface{}     `json:"location,omitempty"`
	LongDescription       *string          `json:"longDescription,omitempty"`
	OriginatingCalendarId *string          `json:"originating_calendar_id,omitempty"`
	OutlookUrl            *string          `json:"outlookUrl,omitempty"`
	RecurrenceId          *string          `json:"recurrence_id,omitempty"`
	RecurringFlag         *bool            `json:"recurringFlag,omitempty"`
	RegistrationURL       *string          `json:"registrationURL,omitempty"`
	SourceId              *string          `json:"source_id,omitempty"`
	Sponsor               *string          `json:"sponsor,omitempty"`
	StartDate             *string          `json:"startDate,omitempty"`
	Subcategory           *string          `json:"subcategory,omitempty"`
	SubeEvents            *[]SubEvents     `json:"subeEvents,omitempty"`
	Title                 *string          `json:"title,omitempty"`
	TitleUrl              *string          `json:"titleUrl,omitempty"`
}

// LocationLegacy defines model for LocationLegacy.
type LocationLegacy struct {
	Description *string  `json:"description,omitempty"`
	Latitude    *float32 `json:"latitude,omitempty"`
	Longitude   *float32 `json:"longitude,omitempty"`
}

// Question defines model for Question.
type Question struct {
	Id           *string   `json:"id,omitempty"`
	ProviderId   *int      `json:"provider_id,omitempty"`
	Question     *string   `json:"question,omitempty"`
	Required     *bool     `json:"required,omitempty"`
	SelectValues *[]string `json:"select_values,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// QuestionAnswer defines model for QuestionAnswer.
type QuestionAnswer struct {
	QuestionId *string   `json:"question_id,omitempty"`
	Values     *[]string `json:"values,omitempty"`
}

// SubEvents defines model for SubEvents.
type SubEvents struct {
	Id         *string `json:"id,omitempty"`
	IsFeatured *bool   `json:"isFeatured,omitempty"`
	Track      *string `json:"track,omitempty"`
}

// TimeSlot defines model for TimeSlot.
type TimeSlot struct {
	Capacity   int                    `json:"capacity"`
	Details    map[string]interface{} `json:"details"`
	EndTime    string                 `json:"end_time"`
	Filled     int                    `json:"filled"`
	Id         *int                   `json:"id,omitempty"`
	PersonId   int                    `json:"person_id"`
	ProviderId *int                   `json:"provider_id,omitempty"`
	StartTime  string                 `json:"start_time"`
	UnitId     *int                   `json:"unit_id,omitempty"`
}

// WebtoolsBlacklistItems defines model for WebtoolsBlacklistItems.
type WebtoolsBlacklistItems struct {
	Data *[]string `json:"data,omitempty"`
	Name *string   `json:"name,omitempty"`
}

// TpsReqCreateEvent defines model for _tps_req_create-event.
type TpsReqCreateEvent struct {
	AllDay            *bool                       `json:"all_day,omitempty"`
	Category          *string                     `json:"category,omitempty"`
	Contacts          *[]TpsReqCreateEventContact `json:"contacts,omitempty"`
	Cost              *string                     `json:"cost,omitempty"`
	CreatedBy         *string                     `json:"created_by,omitempty"`
	DateModified      *string                     `json:"date_modified,omitempty"`
	EndDate           *string                     `json:"end_date,omitempty"`
	ImageUrl          *string                     `json:"image_url"`
	IsVirtual         *bool                       `json:"is_virtual,omitempty"`
	Location          *TpsReqCreateEventLocation  `json:"location,omitempty"`
	LongDescription   *string                     `json:"long_description,omitempty"`
	RecurrenceId      *int                        `json:"recurrence_id,omitempty"`
	RecurringFlag     *bool                       `json:"recurring_flag,omitempty"`
	RegistrationLabel *string                     `json:"registration_label,omitempty"`
	RegistrationUrl   *string                     `json:"registration_url,omitempty"`
	Sponsor           *string                     `json:"sponsor,omitempty"`
	StartDate         *string                     `json:"start_date,omitempty"`
	Subcategory       *string                     `json:"subcategory,omitempty"`
	Tags              *[]string                   `json:"tags,omitempty"`
	TargetAudience    *[]string                   `json:"target_audience,omitempty"`
	Title             *string                     `json:"title,omitempty"`
	TitleUrl          *string                     `json:"title_url,omitempty"`
}

// TpsReqCreateEventContact defines model for _tps_req_create-event-contact.
type TpsReqCreateEventContact struct {
	ContactEmail *string `json:"contact_email,omitempty"`
	ContactName  *string `json:"contact_name,omitempty"`
	ContactPhone *string `json:"contact_phone,omitempty"`
}

// TpsReqCreateEventLocation defines model for _tps_req_create-event-location.
type TpsReqCreateEventLocation struct {
	Address     *string  `json:"address,omitempty"`
	Building    *string  `json:"building,omitempty"`
	Description *string  `json:"description,omitempty"`
	Floor       *int     `json:"floor,omitempty"`
	Latitude    *float32 `json:"latitude,omitempty"`
	Longitude   *float32 `json:"longitude,omitempty"`
	Room        *string  `json:"room,omitempty"`
}

// GetApiAdminConfigsParams defines parameters for GetApiAdminConfigs.
type GetApiAdminConfigsParams struct {
	// Type config type
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// PostApiAdminWebtoolsBlacklistJSONBody defines parameters for PostApiAdminWebtoolsBlacklist.
type PostApiAdminWebtoolsBlacklistJSONBody struct {
	Data *[]string `json:"data,omitempty"`
}

// GetApiBbsAppointmentsPeopleParams defines parameters for GetApiBbsAppointmentsPeople.
type GetApiBbsAppointmentsPeopleParams struct {
	// ExternalId External system id of person making the request
	ExternalId string `form:"external_id" json:"external_id"`

	// ProviderId Rokwire provider id of the organization tracking/providing appointment data
	ProviderId string `form:"provider_id" json:"provider_id"`

	// UnitId External id identifying the unit the calendar entries belong to
	UnitId string `form:"unit_id" json:"unit_id"`
}

// GetApiBbsAppointmentsQandsParams defines parameters for GetApiBbsAppointmentsQands.
type GetApiBbsAppointmentsQandsParams struct {
	// ExternalId External system id of person making the request
	ExternalId string `form:"external_id" json:"external_id"`

	// ProviderId Rokwire provider id of the organization tracking/providing appointment data
	ProviderId string `form:"provider_id" json:"provider_id"`

	// UnitId External id identifying the unit the calendar entries belong to
	UnitId string `form:"unit_id" json:"unit_id"`

	// PersonId External id identifying the advisor the calendar entry belongs to
	PersonId string `form:"person_id" json:"person_id"`

	// StartTime The first date to look for available slots (yyyy-mm-dd). Required if end_time is provided.
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime The last date to look for available slots (yyyy-mm-dd) Required if start_time is provided
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetApiBbsAppointmentsQuestionsParams defines parameters for GetApiBbsAppointmentsQuestions.
type GetApiBbsAppointmentsQuestionsParams struct {
	// ExternalId External system id of person making the request
	ExternalId string `form:"external_id" json:"external_id"`

	// ProviderId Rokwire provider id of the organization tracking/providing appointment data
	ProviderId string `form:"provider_id" json:"provider_id"`

	// UnitId External id identifying the unit the calendar entries belong to
	UnitId string `form:"unit_id" json:"unit_id"`

	// PersonId External id identifying the advisor the calendar entry belongs to
	PersonId string `form:"person_id" json:"person_id"`
}

// GetApiBbsAppointmentsSlotsParams defines parameters for GetApiBbsAppointmentsSlots.
type GetApiBbsAppointmentsSlotsParams struct {
	// ExternalId External system id of person making the request
	ExternalId string `form:"external_id" json:"external_id"`

	// ProviderId Rokwire provider id of the organization tracking/providing appointment data
	ProviderId string `form:"provider_id" json:"provider_id"`

	// UnitId External id identifying the unit the calendar entries belong to
	UnitId string `form:"unit_id" json:"unit_id"`

	// PersonId External id identifying the advisor the calendar entry belongs to
	PersonId string `form:"person_id" json:"person_id"`

	// StartTime The first date to look for available slots (yyyy-mm-dd). Required if end_time is provided.
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime The last date to look for available slots (yyyy-mm-dd) Required if start_time is provided
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetApiBbsAppointmentsUnitsParams defines parameters for GetApiBbsAppointmentsUnits.
type GetApiBbsAppointmentsUnitsParams struct {
	// ExternalId External system id of person making the request
	ExternalId string `form:"external_id" json:"external_id"`

	// ProviderId Rokwire provider id of the organization tracking/providing appointment data
	ProviderId string `form:"provider_id" json:"provider_id"`
}

// DeleteApiBbsAppointmentsIdParams defines parameters for DeleteApiBbsAppointmentsId.
type DeleteApiBbsAppointmentsIdParams struct {
	// ExternalId Users UIN
	ExternalId string `form:"external_id" json:"external_id"`

	// ProviderId Rokwire provider id of the organization tracking/providing appointment data
	ProviderId string `form:"provider_id" json:"provider_id"`
}

// DeleteApiTpsEventsParams defines parameters for DeleteApiTpsEvents.
type DeleteApiTpsEventsParams struct {
	// Ids A comma-separated list of ids
	Ids *string `form:"ids,omitempty" json:"ids,omitempty"`
}

// PostApiTpsEventsJSONBody defines parameters for PostApiTpsEvents.
type PostApiTpsEventsJSONBody = []TpsReqCreateEvent

// PostApiAdminConfigsJSONRequestBody defines body for PostApiAdminConfigs for application/json ContentType.
type PostApiAdminConfigsJSONRequestBody = Config

// PutApiAdminConfigsIdJSONRequestBody defines body for PutApiAdminConfigsId for application/json ContentType.
type PutApiAdminConfigsIdJSONRequestBody = Config

// PostApiAdminExamplesJSONRequestBody defines body for PostApiAdminExamples for application/json ContentType.
type PostApiAdminExamplesJSONRequestBody = Example

// PutApiAdminExamplesIdJSONRequestBody defines body for PutApiAdminExamplesId for application/json ContentType.
type PutApiAdminExamplesIdJSONRequestBody = Example

// PostApiAdminWebtoolsBlacklistJSONRequestBody defines body for PostApiAdminWebtoolsBlacklist for application/json ContentType.
type PostApiAdminWebtoolsBlacklistJSONRequestBody PostApiAdminWebtoolsBlacklistJSONBody

// PostApiBbsAppointmentsJSONRequestBody defines body for PostApiBbsAppointments for application/json ContentType.
type PostApiBbsAppointmentsJSONRequestBody = AppointmentPost

// PutApiBbsAppointmentsJSONRequestBody defines body for PutApiBbsAppointments for application/json ContentType.
type PutApiBbsAppointmentsJSONRequestBody = AppointmentPost

// PostApiTpsEventsJSONRequestBody defines body for PostApiTpsEvents for application/json ContentType.
type PostApiTpsEventsJSONRequestBody = PostApiTpsEventsJSONBody

// AsEnvConfigData returns the union data inside the Config_Data as a EnvConfigData
func (t Config_Data) AsEnvConfigData() (EnvConfigData, error) {
	var body EnvConfigData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEnvConfigData overwrites any union data inside the Config_Data as the provided EnvConfigData
func (t *Config_Data) FromEnvConfigData(v EnvConfigData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEnvConfigData performs a merge with any union data inside the Config_Data, using the provided EnvConfigData
func (t *Config_Data) MergeEnvConfigData(v EnvConfigData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
